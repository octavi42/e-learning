// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}


datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum difficulty {
    EASY
    MEDIUM
    HARD
}


model User {
    id        String   @id @default(cuid())

    email           String?
    name            String      @unique
    categoryResume  String      @default("Start")
    answerResume    Int         @default(0)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    summary   String?
    answers   Answer[]

    userCategoryReview UserCategoryReview[]
}

model UserCategoryReview {
    id          String   @id @default(cuid())

    userId      String
    user        User     @relation(fields: [userId], references: [id])

    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])

    review          String?     @db.Text
    improvement     String?     @db.Text
    score           Int?
    source          String?     @db.Text
    links           Links[]

    @@unique([userId, categoryId])
}

model Question {
    id              String      @id @default(cuid())

    question        String
    expected_answer String      @db.Text
    order           Int

    difficulty      difficulty?

    answers         Answer[]
    categoryId      String
    category        Category @relation(fields: [categoryId], references: [id])

    @@unique([order, categoryId])
}


model Category {
    id          String   @id @default(cuid())

    name        String    @unique
    summary     String?   @db.Text

    order       Int       @unique     @default(autoincrement())

    categoryResume  UserCategoryReview[]

    questions   Question[]
}


model Answer {
    id              String      @id @default(cuid())

    answer          String      @db.Text
    correct         Boolean
    rating          Int
    review          String      @db.Text
    answered_at     DateTime    @default(now())
    updated_at      DateTime    @updatedAt

    questionId      String
    question        Question @relation(fields: [questionId], references: [id])
    userId          String
    user            User     @relation(fields: [userId], references: [id])

    @@unique([questionId, userId])
}


model Links {
    id             String      @id @default(cuid())

    title          String?  @db.Text
    link           String   @db.Text
    summary        String   @db.Text

    userCategoryReviewId String?
    userCategoryReview   UserCategoryReview? @relation(fields: [userCategoryReviewId], references: [id])
}
